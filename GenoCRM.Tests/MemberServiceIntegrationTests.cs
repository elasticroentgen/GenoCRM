using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using GenoCRM.Data;
using GenoCRM.Models.Domain;
using GenoCRM.Services.Business;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using Moq;
using System.Security.Claims;

namespace GenoCRM.Tests;

public class MemberServiceIntegrationTests : IDisposable
{
    private readonly IServiceProvider _serviceProvider;
    private readonly GenoDbContext _context;
    private readonly IMemberService _memberService;
    private readonly IShareService _shareService;

    public MemberServiceIntegrationTests()
    {
        var databaseName = $"TestDb_{Guid.NewGuid()}";
        
        var services = new ServiceCollection();
        
        // Add configuration
        var configuration = new ConfigurationBuilder()
            .AddInMemoryCollection(new Dictionary<string, string?>
            {
                ["CooperativeSettings:ShareDenomination"] = "250.00",
                ["CooperativeSettings:MaxSharesPerMember"] = "100",
                ["CooperativeSettings:FiscalYearStartMonth"] = "1",
                ["CooperativeSettings:FiscalYearStartDay"] = "1"
            })
            .Build();
        
        services.AddSingleton<IConfiguration>(configuration);
        services.AddLogging(builder => builder.AddConsole());
        
        // Add DbContext with transaction warning suppression
        services.AddDbContext<GenoDbContext>(options =>
            options.UseInMemoryDatabase(databaseName: databaseName)
                .ConfigureWarnings(x => x.Ignore(InMemoryEventId.TransactionIgnoredWarning)));
        
        // Add missing services that MemberService requires
        var mockAuditService = new Mock<IAuditService>();
        var mockHttpContextAccessor = new Mock<IHttpContextAccessor>();
        
        // Setup HTTP context with mock user
        var mockHttpContext = new Mock<HttpContext>();
        var mockUser = new Mock<ClaimsPrincipal>();
        mockUser.Setup(x => x.Identity!.Name).Returns("integration-test-user");
        mockHttpContext.Setup(x => x.User).Returns(mockUser.Object);
        mockHttpContextAccessor.Setup(x => x.HttpContext).Returns(mockHttpContext.Object);
        
        services.AddSingleton(mockAuditService.Object);
        services.AddSingleton(mockHttpContextAccessor.Object);
        
        // Add services
        services.AddScoped<IMemberService, MemberService>();
        services.AddScoped<IShareService, ShareService>();
        services.AddScoped<IFiscalYearService, FiscalYearService>();
        
        _serviceProvider = services.BuildServiceProvider();
        _context = _serviceProvider.GetRequiredService<GenoDbContext>();
        _memberService = _serviceProvider.GetRequiredService<IMemberService>();
        _shareService = _serviceProvider.GetRequiredService<IShareService>();
    }

    [Fact]
    public async Task CreateMemberAsync_ShouldCreateMemberWithAutoGeneratedNumber()
    {
        // Arrange
        var member = CreateTestMember();

        // Act
        var result = await _memberService.CreateMemberAsync(member);

        // Assert
        result.Should().NotBeNull();
        result.MemberNumber.Should().Be("M001");
        result.Id.Should().BeGreaterThan(0);
        result.FirstName.Should().Be("Test");
        result.LastName.Should().Be("User");
    }

    [Fact]
    public async Task CreateMemberAsync_ShouldCreateMemberWithInitialShares()
    {
        // Arrange
        var member = CreateTestMember();
        var initialShareQuantity = 3;

        // Act
        var result = await _memberService.CreateMemberAsync(member, initialShareQuantity);

        // Assert
        result.Should().NotBeNull();
        result.MemberNumber.Should().Be("M001");

        // Verify shares were created
        var shares = await _shareService.GetSharesByMemberIdAsync(result.Id);
        shares.Should().HaveCount(1);
        var share = shares.First();
        share.Quantity.Should().Be(initialShareQuantity);
        share.Value.Should().Be(250.00m);
        share.NominalValue.Should().Be(250.00m);
        share.Status.Should().Be(ShareStatus.Active);
        share.CertificateNumber.Should().Be("CERT001");
    }

    [Fact]
    public async Task CreateMemberAsync_ShouldGenerateSequentialMemberNumbers()
    {
        // Arrange
        var member1 = CreateTestMember(firstName: "First");
        var member2 = CreateTestMember(firstName: "Second");
        var member3 = CreateTestMember(firstName: "Third");

        // Act
        var result1 = await _memberService.CreateMemberAsync(member1);
        var result2 = await _memberService.CreateMemberAsync(member2);
        var result3 = await _memberService.CreateMemberAsync(member3);

        // Assert
        result1.MemberNumber.Should().Be("M001");
        result2.MemberNumber.Should().Be("M002");
        result3.MemberNumber.Should().Be("M003");
    }

    [Fact]
    public async Task GetCurrentShareDenominationAsync_ShouldReturnConfiguredValue()
    {
        // Act
        var result = await _memberService.GetCurrentShareDenominationAsync();

        // Assert
        result.Should().Be(250.00m);
    }

    [Fact]
    public async Task GenerateNextMemberNumberAsync_ShouldReturnM001ForEmptyDatabase()
    {
        // Act
        var result = await _memberService.GenerateNextMemberNumberAsync();

        // Assert
        result.Should().Be("M001");
    }

    [Fact]
    public async Task MemberAndShareCreation_ShouldBeTransactional()
    {
        // Arrange
        var member = CreateTestMember();
        var initialShareQuantity = 2;

        // Act
        var createdMember = await _memberService.CreateMemberAsync(member, initialShareQuantity);

        // Assert
        // Verify member was created
        var retrievedMember = await _memberService.GetMemberByIdAsync(createdMember.Id);
        retrievedMember.Should().NotBeNull();
        retrievedMember!.MemberNumber.Should().Be("M001");

        // Verify shares were created
        var shares = await _shareService.GetSharesByMemberIdAsync(createdMember.Id);
        shares.Should().HaveCount(1);
        
        var share = shares.First();
        share.Quantity.Should().Be(initialShareQuantity);
        share.MemberId.Should().Be(createdMember.Id);
        share.Status.Should().Be(ShareStatus.Active);
        
        // Verify total share value calculation
        var totalValue = share.Quantity * share.Value;
        totalValue.Should().Be(500.00m); // 2 * 250
    }

    [Fact]
    public async Task ShareService_ShouldGenerateSequentialCertificateNumbers()
    {
        // Arrange
        var member1 = CreateTestMember(firstName: "First");
        var member2 = CreateTestMember(firstName: "Second");

        // Act
        await _memberService.CreateMemberAsync(member1, 1);
        await _memberService.CreateMemberAsync(member2, 1);

        // Assert
        var allShares = await _shareService.GetAllSharesAsync();
        allShares.Should().HaveCount(2);
        
        var certificates = allShares.Select(s => s.CertificateNumber).OrderBy(c => c).ToList();
        certificates[0].Should().Be("CERT001");
        certificates[1].Should().Be("CERT002");
    }

    [Fact]
    public void Database_ShouldBeInMemory()
    {
        // Assert
        _context.Database.IsInMemory().Should().BeTrue();
    }

    private static Member CreateTestMember(string firstName = "Test", string lastName = "User")
    {
        return new Member
        {
            MemberNumber = string.Empty, // Will be auto-generated
            FirstName = firstName,
            LastName = lastName,
            Email = $"{firstName.ToLower()}.{lastName.ToLower()}@test.com",
            Phone = "555-0123",
            Street = "123 Test St",
            PostalCode = "12345",
            City = "Test City",
            Country = "Test Country",
            BirthDate = new DateTime(1990, 1, 1),
            JoinDate = DateTime.Today,
            Status = MemberStatus.Active
        };
    }

    public void Dispose()
    {
        _context.Dispose();
        if (_serviceProvider is IDisposable disposable)
        {
            disposable.Dispose();
        }
    }
}