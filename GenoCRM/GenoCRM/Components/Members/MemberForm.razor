@page "/members/create"
@page "/members/{MemberId:int}/edit"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using Microsoft.AspNetCore.Authorization
@using GenoCRM.Services.Localization
@using GenoCRM.Services.UI
@using GenoCRM.Resources.Pages
@attribute [Authorize(Policy = "CreateMembers")]
@inject IMemberService MemberService
@inject NavigationManager Navigation
@inject IStringLocalizer<GenoCRM.SharedResource> SharedLocalizer
@inject IStringLocalizer<Members> MembersLocalizer
@inject IFormattingService FormattingService
@inject IModalService ModalService
@inject ICountryService CountryService
@rendermode InteractiveServer

<PageTitle>@(IsEdit ? MembersLocalizer["EditMember"] : MembersLocalizer["CreateMember"])</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@(IsEdit ? MembersLocalizer["EditMember"] : MembersLocalizer["CreateMember"])</h1>
    <button class="btn btn-outline-secondary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> @MembersLocalizer["BackToList"]
    </button>
</div>

<EditForm Model="@_member" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>@MembersLocalizer["PersonalInformation"]</h5>
                </div>
                <div class="card-body">
                    @if (IsEdit)
                    {
                        <div class="mb-3">
                            <label class="form-label">@SharedLocalizer["MemberNumber"]</label>
                            <input type="text" class="form-control" value="@_member.MemberNumber" readonly />
                            <div class="form-text">@MembersLocalizer["MemberNumberReadonly"]</div>
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["MemberType"]</label>
                        <InputSelect @bind-Value="_member.MemberType" class="form-select" @onchange="OnMemberTypeChanged">
                            <option value="@MemberType.Individual">@SharedLocalizer["Individual"]</option>
                            <option value="@MemberType.Company">@SharedLocalizer["Company"]</option>
                        </InputSelect>
                    </div>
                    
                    @if (_member.MemberType == MemberType.Individual)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">@SharedLocalizer["Prefix"]</label>
                                    <InputSelect @bind-Value="_member.Prefix" class="form-select">
                                        <option value="">@SharedLocalizer["None"]</option>
                                        <option value="Dr.">Dr.</option>
                                        <option value="Prof.">Prof.</option>
                                        <option value="Prof. Dr.">Prof. Dr.</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">@MembersLocalizer["FirstNameLabel"]</label>
                                    <InputText @bind-Value="_member.FirstName" class="form-control" />
                                    <ValidationMessage For="@(() => _member.FirstName)" />
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="mb-3">
                                    <label class="form-label">@MembersLocalizer["LastNameLabel"]</label>
                                    <InputText @bind-Value="_member.LastName" class="form-control" />
                                    <ValidationMessage For="@(() => _member.LastName)" />
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">@SharedLocalizer["CompanyName"] *</label>
                            <InputText @bind-Value="_member.CompanyName" class="form-control" />
                            <ValidationMessage For="@(() => _member.CompanyName)" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">@SharedLocalizer["ContactPerson"]</label>
                            <InputText @bind-Value="_member.ContactPerson" class="form-control" />
                            <ValidationMessage For="@(() => _member.ContactPerson)" />
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["Email"]</label>
                        <InputText @bind-Value="_member.Email" class="form-control" type="email" />
                        <ValidationMessage For="@(() => _member.Email)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["Phone"]</label>
                        <InputText @bind-Value="_member.Phone" class="form-control" />
                        <ValidationMessage For="@(() => _member.Phone)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["BirthDate"]</label>
                        <InputDate @bind-Value="_member.BirthDate" class="form-control" />
                        <ValidationMessage For="@(() => _member.BirthDate)" />
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>@MembersLocalizer["AddressInformation"]</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["Street"]</label>
                        <InputText @bind-Value="_member.Street" class="form-control" />
                        <ValidationMessage For="@(() => _member.Street)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">@SharedLocalizer["PostalCode"]</label>
                                <InputText @bind-Value="_member.PostalCode" class="form-control" />
                                <ValidationMessage For="@(() => _member.PostalCode)" />
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">@SharedLocalizer["City"]</label>
                                <InputText @bind-Value="_member.City" class="form-control" />
                                <ValidationMessage For="@(() => _member.City)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["Country"]</label>
                        <InputSelect @bind-Value="_member.Country" class="form-select">
                            @foreach (var country in _countries)
                            {
                                <option value="@country.Key">@country.Value</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => _member.Country)" />
                    </div>
                </div>
            </div>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h5>@MembersLocalizer["MembershipInformation"]</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">@MembersLocalizer["JoinDateLabel"]</label>
                        <InputDate @bind-Value="_member.JoinDate" class="form-control" />
                        <ValidationMessage For="@(() => _member.JoinDate)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">@SharedLocalizer["Status"]</label>
                        <InputSelect @bind-Value="_member.Status" class="form-select">
                            <option value="@MemberStatus.Active">@SharedLocalizer["Active"]</option>
                            <option value="@MemberStatus.Inactive">@SharedLocalizer["Inactive"]</option>
                            <option value="@MemberStatus.Suspended">@SharedLocalizer["Suspended"]</option>
                            <option value="@MemberStatus.Offboarding">@SharedLocalizer["Offboarding"]</option>
                            <option value="@MemberStatus.Terminated">@SharedLocalizer["Terminated"]</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => _member.Status)" />
                    </div>
                    
                    @if (_member.Status == MemberStatus.Terminated)
                    {
                        <div class="mb-3">
                            <label class="form-label">@MembersLocalizer["LeaveDate"]</label>
                            <InputDate @bind-Value="_member.LeaveDate" class="form-control" />
                            <ValidationMessage For="@(() => _member.LeaveDate)" />
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">@MembersLocalizer["Notes"]</label>
                        <InputTextArea @bind-Value="_member.Notes" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => _member.Notes)" />
                    </div>
                    
                    @if (!IsEdit)
                    {
                        <div class="mb-3">
                            <label class="form-label">@MembersLocalizer["InitialShareQuantityRequired"]</label>
                            <InputNumber @bind-Value="_initialShareQuantity" class="form-control" min="1" />
                            <div class="form-text">
                                @string.Format(MembersLocalizer["InitialSharesDescription"], _shareDenomination)
                                <br />@SharedLocalizer["TotalValue"]: <strong>@FormattingService.FormatCurrency(_initialShareQuantity * _shareDenomination)</strong>
                            </div>
                            <ValidationMessage For="@(() => _initialShareQuantity)" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-4">
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="GoBack">@SharedLocalizer["Cancel"]</button>
            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                @if (_isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                @(IsEdit ? MembersLocalizer["UpdateMember"] : MembersLocalizer["CreateMember"])
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int? MemberId { get; set; }
    
    private Member _member = new();
    private bool _isSubmitting = false;
    private int _initialShareQuantity = 1;
    private decimal _shareDenomination = 250.00m;
    private Dictionary<string, string> _countries = new();
    private bool IsEdit => MemberId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        // Load countries and share denomination
        _countries = CountryService.GetCountries();
        _shareDenomination = await MemberService.GetCurrentShareDenominationAsync();
        
        if (IsEdit && MemberId.HasValue)
        {
            var existingMember = await MemberService.GetMemberByIdAsync(MemberId.Value);
            if (existingMember != null)
            {
                _member = existingMember;
            }
            else
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], "Member not found");
                Navigation.NavigateTo("/members");
            }
        }
        else
        {
            // Set default values for new member
            _member.JoinDate = DateTime.Today;
            _member.Status = MemberStatus.Active;
            _member.MemberNumber = string.Empty; // Ensure it's empty for auto-generation
            _member.Country = CountryService.GetDefaultCountryCode(); // Default to Germany
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _isSubmitting = true;
            
            if (IsEdit)
            {
                await MemberService.UpdateMemberAsync(_member);
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], MembersLocalizer["MemberUpdatedSuccessfully"]);
            }
            else
            {
                if (_initialShareQuantity < 1)
                {
                    await ModalService.ShowErrorAsync(SharedLocalizer["Error"], MembersLocalizer["InitialShareQuantityMinimum"]);
                    return;
                }
                
                await MemberService.CreateMemberAsync(_member, _initialShareQuantity);
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], string.Format(MembersLocalizer["MemberCreatedSuccessfully"], _initialShareQuantity));
            }
            
            Navigation.NavigateTo("/members");
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], string.Format(MembersLocalizer["ErrorSavingMember"], ex.Message));
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/members");
    }

    private void OnMemberTypeChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (Enum.TryParse<MemberType>(e.Value?.ToString(), out var memberType))
        {
            _member.MemberType = memberType;
            
            // Clear type-specific fields when switching
            if (memberType == MemberType.Individual)
            {
                _member.CompanyName = string.Empty;
                _member.ContactPerson = null;
            }
            else
            {
                _member.FirstName = string.Empty;
                _member.LastName = string.Empty;
                _member.Prefix = null;
            }
        }
    }
}