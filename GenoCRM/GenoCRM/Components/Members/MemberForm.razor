@page "/members/create"
@page "/members/{MemberId:int}/edit"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@inject IMemberService MemberService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>@(IsEdit ? "Edit Member" : "Create Member")</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@(IsEdit ? "Edit Member" : "Create Member")</h1>
    <button class="btn btn-outline-secondary" @onclick="GoBack">
        <i class="fas fa-arrow-left"></i> Back to List
    </button>
</div>

<EditForm Model="@member" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Personal Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Member Number</label>
                        <InputText @bind-Value="member.MemberNumber" class="form-control" placeholder="Auto-generated if empty" />
                        <ValidationMessage For="@(() => member.MemberNumber)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">First Name *</label>
                                <InputText @bind-Value="member.FirstName" class="form-control" />
                                <ValidationMessage For="@(() => member.FirstName)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Last Name *</label>
                                <InputText @bind-Value="member.LastName" class="form-control" />
                                <ValidationMessage For="@(() => member.LastName)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="member.Email" class="form-control" type="email" />
                        <ValidationMessage For="@(() => member.Email)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <InputText @bind-Value="member.Phone" class="form-control" />
                        <ValidationMessage For="@(() => member.Phone)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Birth Date</label>
                        <InputDate @bind-Value="member.BirthDate" class="form-control" />
                        <ValidationMessage For="@(() => member.BirthDate)" />
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Address Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Street</label>
                        <InputText @bind-Value="member.Street" class="form-control" />
                        <ValidationMessage For="@(() => member.Street)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Postal Code</label>
                                <InputText @bind-Value="member.PostalCode" class="form-control" />
                                <ValidationMessage For="@(() => member.PostalCode)" />
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">City</label>
                                <InputText @bind-Value="member.City" class="form-control" />
                                <ValidationMessage For="@(() => member.City)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <InputText @bind-Value="member.Country" class="form-control" />
                        <ValidationMessage For="@(() => member.Country)" />
                    </div>
                </div>
            </div>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h5>Membership Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Join Date *</label>
                        <InputDate @bind-Value="member.JoinDate" class="form-control" />
                        <ValidationMessage For="@(() => member.JoinDate)" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <InputSelect @bind-Value="member.Status" class="form-select">
                            <option value="@MemberStatus.Active">Active</option>
                            <option value="@MemberStatus.Inactive">Inactive</option>
                            <option value="@MemberStatus.Suspended">Suspended</option>
                            <option value="@MemberStatus.Terminated">Terminated</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => member.Status)" />
                    </div>
                    
                    @if (member.Status == MemberStatus.Terminated)
                    {
                        <div class="mb-3">
                            <label class="form-label">Leave Date</label>
                            <InputDate @bind-Value="member.LeaveDate" class="form-control" />
                            <ValidationMessage For="@(() => member.LeaveDate)" />
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <InputTextArea @bind-Value="member.Notes" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => member.Notes)" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-4">
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                @(IsEdit ? "Update Member" : "Create Member")
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int? MemberId { get; set; }
    
    private Member member = new();
    private bool isSubmitting = false;
    private bool IsEdit => MemberId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit && MemberId.HasValue)
        {
            var existingMember = await MemberService.GetMemberByIdAsync(MemberId.Value);
            if (existingMember != null)
            {
                member = existingMember;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Member not found");
                Navigation.NavigateTo("/members");
            }
        }
        else
        {
            // Set default values for new member
            member.JoinDate = DateTime.Today;
            member.Status = MemberStatus.Active;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            
            if (IsEdit)
            {
                await MemberService.UpdateMemberAsync(member);
                await JSRuntime.InvokeVoidAsync("alert", "Member updated successfully");
            }
            else
            {
                await MemberService.CreateMemberAsync(member);
                await JSRuntime.InvokeVoidAsync("alert", "Member created successfully");
            }
            
            Navigation.NavigateTo("/members");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving member: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/members");
    }
}