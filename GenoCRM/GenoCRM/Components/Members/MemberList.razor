@page "/members"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GenoCRM.Services.Localization
@using GenoCRM.Services.UI
@using GenoCRM.Resources.Pages
@attribute [Authorize(Policy = "ViewMembers")]
@inject IMemberService MemberService
@inject NavigationManager Navigation
@inject IStringLocalizer<GenoCRM.SharedResource> SharedLocalizer
@inject IStringLocalizer<Members> MembersLocalizer
@inject IFormattingService FormattingService
@inject IModalService ModalService
@inject IFiscalYearService FiscalYearService
@rendermode InteractiveServer

<PageTitle>@MembersLocalizer["PageTitle"]</PageTitle>

<PageDocumentation PageTitle="@MembersLocalizer["MemberListTitle"]" 
                   PageDescription="@MembersLocalizer["MemberListDescription"]">
    <HelpContent>
        <div class="help-section">
            <div class="help-title">@MembersLocalizer["SearchAndFilter"]</div>
            <div class="help-text">@MembersLocalizer["SearchAndFilterHelp"]</div>
        </div>
        <div class="help-section">
            <div class="help-title">@MembersLocalizer["MemberStatus"]</div>
            <div class="help-text">@MembersLocalizer["MemberStatusHelp"]</div>
            <div class="satzung-reference">@MembersLocalizer["SatzungReference"] ยง3, ยง4</div>
        </div>
        <div class="help-section">
            <div class="help-title">@MembersLocalizer["MemberActions"]</div>
            <div class="help-text">@MembersLocalizer["MemberActionsHelp"]</div>
        </div>
        <div class="help-section">
            <div class="help-title">@MembersLocalizer["AddNewMember"]</div>
            <div class="help-text">@MembersLocalizer["AddNewMemberHelp"]</div>
            <div class="satzung-reference">@MembersLocalizer["SatzungReference"] ยง5</div>
        </div>
    </HelpContent>
</PageDocumentation>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@MembersLocalizer["PageTitle"]</h1>
    <CascadingAuthenticationState>
    <AuthorizeView Policy="CreateMembers">
        <Authorized>
            <button class="btn btn-primary" @onclick="CreateMember">
                <i class="fas fa-plus"></i> @MembersLocalizer["AddNewMember"]
            </button>
        </Authorized>
    </AuthorizeView>
    </CascadingAuthenticationState>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="@MembersLocalizer["SearchMembers"]" @bind="_searchTerm" @onkeydown="OnSearchKeyPress" />
            <button class="btn btn-outline-secondary" @onclick="SearchMembers">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
    <div class="col-md-6">
        <select class="form-select" @bind="_selectedStatus" @bind:after="FilterByStatus">
            <option value="">@SharedLocalizer["AllStatus"]</option>
            <option value="Active">@SharedLocalizer["Active"]</option>
            <option value="Inactive">@SharedLocalizer["Inactive"]</option>
            <option value="Suspended">@SharedLocalizer["Suspended"]</option>
            <option value="Offboarding">@SharedLocalizer["Offboarding"]</option>
        </select>
    </div>
</div>

@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">@MembersLocalizer["Loading"]</span>
        </div>
    </div>
}
else if (_members?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>@SharedLocalizer["MemberNumber"]</th>
                    <th>@SharedLocalizer["Name"]</th>
                    <th>@SharedLocalizer["Email"]</th>
                    <th>@SharedLocalizer["Status"]</th>
                    <th>@SharedLocalizer["JoinDate"]</th>
                    <th>@SharedLocalizer["Shares"]</th>
                    <th>@SharedLocalizer["TotalValue"]</th>
                    <th>@MembersLocalizer["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in _members)
                {
                    <tr>
                        <td>@member.MemberNumber</td>
                        <td>@member.FullName</td>
                        <td>@member.Email</td>
                        <td>
                            <span class="badge bg-@GetStatusColor(member.Status)">
                                @GetLocalizedStatus(member.Status)
                            </span>
                        </td>
                        <td>@FormattingService.FormatDate(member.JoinDate)</td>
                        <td>@member.TotalShareCount</td>
                        <td>@FormattingService.FormatCurrency(member.TotalShareValue)</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewMember(member.Id)" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <CascadingAuthenticationState>
                                    <AuthorizeView Policy="EditMembers">
                                        <Authorized>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditMember(member.Id)" title="Edit Member">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </Authorized>
                                    </AuthorizeView>
                                    <AuthorizeView Policy="DeleteMembers">
                                        <Authorized>
                                            @if (member.Status == MemberStatus.Active)
                                            {
                                                <button class="btn btn-sm btn-outline-warning" @onclick="() => OffboardMember(member.Id)" title="@SharedLocalizer["OffboardMember"]">
                                                    <i class="fas fa-sign-out-alt"></i>
                                                </button>
                                            }
                                            else if (member.Status == MemberStatus.Offboarding && FiscalYearService.CanProcessOffboarding())
                                            {
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => FinallyDeleteMember(member.Id)" title="@SharedLocalizer["Delete"]">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        </Authorized>
                                    </AuthorizeView>
                                </CascadingAuthenticationState>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> @MembersLocalizer["NoMembersFound"]
    </div>
}

@code {
    private IEnumerable<Member>? _members;
    private string _searchTerm = string.Empty;
    private string _selectedStatus = string.Empty;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();
            _members = await MemberService.GetAllMembersAsync();
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error loading members: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchMembers()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            await LoadMembers();
            return;
        }

        try
        {
            _isLoading = true;
            _members = await MemberService.SearchMembersAsync(_searchTerm);
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error searching members: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task FilterByStatus()
    {
        if (string.IsNullOrWhiteSpace(_selectedStatus))
        {
            await LoadMembers();
            return;
        }

        try
        {
            _isLoading = true;
            if (Enum.TryParse<MemberStatus>(_selectedStatus, out var status))
            {
                _members = await MemberService.GetMembersByStatusAsync(status);
            }
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error filtering members: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMembers();
        }
    }

    private void CreateMember()
    {
        Navigation.NavigateTo("/members/create");
    }

    private void ViewMember(int memberId)
    {
        Navigation.NavigateTo($"/members/{memberId}");
    }

    private void EditMember(int memberId)
    {
        Navigation.NavigateTo($"/members/{memberId}/edit");
    }

    private async Task OffboardMember(int memberId)
    {
        var canOffboard = await MemberService.CanOffboardMemberAsync(memberId);
        if (!canOffboard)
        {
            await ModalService.ShowAlertAsync(SharedLocalizer["Warning"], "This member cannot be offboarded at this time. Offboarding is not allowed in the last month of the fiscal year.");
            return;
        }

        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Warning"], SharedLocalizer["OffboardConfirmation"]);
        if (confirmed)
        {
            try
            {
                await MemberService.OffboardMemberAsync(memberId);
                await LoadMembers();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], "Member marked for offboarding successfully");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error offboarding member: {ex.Message}");
            }
        }
    }

    private async Task FinallyDeleteMember(int memberId)
    {
        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Warning"], "Are you sure you want to finally delete this member? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await MemberService.FinallyDeleteMemberAsync(memberId);
                await LoadMembers();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], "Member deleted successfully");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error deleting member: {ex.Message}");
            }
        }
    }

    private static string GetStatusColor(MemberStatus status)
    {
        return status switch
        {
            MemberStatus.Active => "success",
            MemberStatus.Inactive => "warning",
            MemberStatus.Suspended => "danger",
            MemberStatus.Offboarding => "info",
            MemberStatus.Terminated => "dark",
            _ => "secondary"
        };
    }

    private string GetLocalizedStatus(MemberStatus status)
    {
        return status switch
        {
            MemberStatus.Active => SharedLocalizer["Active"],
            MemberStatus.Inactive => SharedLocalizer["Inactive"],
            MemberStatus.Suspended => SharedLocalizer["Suspended"],
            MemberStatus.Offboarding => SharedLocalizer["Offboarding"],
            MemberStatus.Terminated => SharedLocalizer["Terminated"],
            _ => status.ToString()
        };
    }
}