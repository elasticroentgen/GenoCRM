@page "/dividends"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using GenoCRM.Services.UI
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "ViewDividends")]
@inject IDividendService DividendService
@inject NavigationManager Navigation
@inject IStringLocalizer<GenoCRM.SharedResource> SharedLocalizer
@inject IModalService ModalService
@rendermode InteractiveServer

<PageTitle>@SharedLocalizer["Dividends"]</PageTitle>

<PageDocumentation PageTitle="@SharedLocalizer["DividendListTitle"]" 
                   PageDescription="@SharedLocalizer["DividendListDescription"]">
    <HelpContent>
        <div class="help-section">
            <div class="help-title">@SharedLocalizer["DividendCalculation"]</div>
            <div class="help-text">@SharedLocalizer["DividendCalculationHelp"]</div>
            <div class="satzung-reference">@SharedLocalizer["SatzungReference"] ยง11</div>
        </div>
        <div class="help-section">
            <div class="help-title">@SharedLocalizer["DividendStatus"]</div>
            <div class="help-text">@SharedLocalizer["DividendStatusHelp"]</div>
        </div>
        <div class="help-section">
            <div class="help-title">@SharedLocalizer["DividendApproval"]</div>
            <div class="help-text">@SharedLocalizer["DividendApprovalHelp"]</div>
            <div class="satzung-reference">@SharedLocalizer["SatzungReference"] ยง12</div>
        </div>
        <div class="help-section">
            <div class="help-title">@SharedLocalizer["TaxWithheld"]</div>
            <div class="help-text">@SharedLocalizer["TaxWithheldHelp"]</div>
        </div>
        <div class="help-section">
            <div class="help-title">@SharedLocalizer["DividendFilters"]</div>
            <div class="help-text">@SharedLocalizer["DividendFiltersHelp"]</div>
        </div>
    </HelpContent>
</PageDocumentation>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@SharedLocalizer["Dividends"]</h1>
    <button class="btn btn-success" @onclick="CalculateAllDividends">
        <i class="fas fa-calculator"></i> @SharedLocalizer["CalculateDividends"]
    </button>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <label class="form-label">@SharedLocalizer["Year"]</label>
        <select class="form-select" @bind="_selectedYear" @bind:after="FilterByYear">
            <option value="0">@SharedLocalizer["AllYears"]</option>
            <option value="2024">2024</option>
            <option value="2023">2023</option>
            <option value="2022">2022</option>
        </select>
    </div>
    <div class="col-md-4">
        <label class="form-label">@SharedLocalizer["Status"]</label>
        <select class="form-select" @bind="_selectedStatus" @bind:after="FilterByStatus">
            <option value="">@SharedLocalizer["AllStatus"]</option>
            <option value="Declared">@SharedLocalizer["Declared"]</option>
            <option value="Approved">@SharedLocalizer["Approved"]</option>
            <option value="Paid">@SharedLocalizer["Paid"]</option>
            <option value="Cancelled">@SharedLocalizer["Cancelled"]</option>
        </select>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body text-center">
                <h6 class="card-title">@SharedLocalizer["TotalDividends"] (@_selectedYear)</h6>
                <h4 class="text-primary">@_totalDividends.ToString("C")</h4>
            </div>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">@SharedLocalizer["Loading"]</span>
        </div>
    </div>
}
else if (_dividends?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>@SharedLocalizer["Member"]</th>
                    <th>@SharedLocalizer["Year"]</th>
                    <th>@SharedLocalizer["BaseAmount"]</th>
                    <th>@SharedLocalizer["Rate"]</th>
                    <th>@SharedLocalizer["DividendAmount"]</th>
                    <th>@SharedLocalizer["TaxWithheld"]</th>
                    <th>@SharedLocalizer["NetAmount"]</th>
                    <th>@SharedLocalizer["DeclarationDate"]</th>
                    <th>@SharedLocalizer["PaymentDate"]</th>
                    <th>@SharedLocalizer["Status"]</th>
                    <th>@SharedLocalizer["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dividend in _dividends)
                {
                    <tr>
                        <td>@dividend.Member?.FullName</td>
                        <td>@dividend.FiscalYear</td>
                        <td>@dividend.BaseAmount.ToString("C")</td>
                        <td>@(dividend.Rate * 100)%</td>
                        <td>@dividend.Amount.ToString("C")</td>
                        <td>@(dividend.TaxWithheld?.ToString("C") ?? "-")</td>
                        <td>@dividend.CalculatedNetAmount.ToString("C")</td>
                        <td>@dividend.DeclarationDate.ToShortDateString()</td>
                        <td>@(dividend.PaymentDate?.ToShortDateString() ?? "-")</td>
                        <td>
                            <span class="badge bg-@GetStatusColor(dividend.Status)">
                                @dividend.Status
                            </span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                @if (dividend.Status == DividendStatus.Declared)
                                {
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => ApproveDividend(dividend.Id)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                }
                                @if (dividend.Status == DividendStatus.Approved)
                                {
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => PayDividend(dividend.Id)">
                                        <i class="fas fa-money-bill"></i>
                                    </button>
                                }
                                @* TODO: Implement dividend edit page
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditDividend(dividend.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                *@
                                @if (dividend.Status != DividendStatus.Paid)
                                {
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteDividend(dividend.Id)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No dividends found.
    </div>
}

@code {
    private IEnumerable<Dividend>? _dividends;
    private int _selectedYear = DateTime.Now.Year;
    private string _selectedStatus = string.Empty;
    private bool _isLoading = true;
    private decimal _totalDividends;

    protected override async Task OnInitializedAsync()
    {
        await LoadDividends();
        await LoadTotalDividends();
    }

    private async Task LoadDividends()
    {
        try
        {
            _isLoading = true;
            _dividends = await DividendService.GetAllDividendsAsync();
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error loading dividends: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTotalDividends()
    {
        try
        {
            if (_selectedYear > 0)
            {
                _totalDividends = await DividendService.GetTotalDividendsByYearAsync(_selectedYear);
            }
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error loading total dividends: {ex.Message}");
        }
    }

    private async Task FilterByYear()
    {
        if (_selectedYear == 0)
        {
            await LoadDividends();
        }
        else
        {
            try
            {
                _isLoading = true;
                _dividends = await DividendService.GetDividendsByFiscalYearAsync(_selectedYear);
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error filtering dividends: {ex.Message}");
            }
            finally
            {
                _isLoading = false;
            }
        }
        await LoadTotalDividends();
    }

    private async Task FilterByStatus()
    {
        await FilterByYear(); // Apply year filter first
    }

    private async Task CalculateAllDividends()
    {
        var rate = await ModalService.ShowPromptAsync("Dividend Rate", "Enter dividend rate (e.g., 0.03 for 3%):", "0.03");
        if (!string.IsNullOrEmpty(rate) && decimal.TryParse(rate, out var dividendRate))
        {
            try
            {
                var calculatedDividends = await DividendService.CalculateDividendsForAllMembersAsync(_selectedYear, dividendRate);
                await LoadDividends();
                await LoadTotalDividends();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], $"Calculated {calculatedDividends.Count()} dividends for {_selectedYear}");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error calculating dividends: {ex.Message}");
            }
        }
    }

    private async Task ApproveDividend(int dividendId)
    {
        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Confirm"], "Approve this dividend?");
        if (confirmed)
        {
            try
            {
                await DividendService.ApproveDividendAsync(dividendId);
                await LoadDividends();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], "Dividend approved successfully");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error approving dividend: {ex.Message}");
            }
        }
    }

    private async Task PayDividend(int dividendId)
    {
        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Confirm"], "Mark this dividend as paid?");
        if (confirmed)
        {
            try
            {
                await DividendService.PayDividendAsync(dividendId);
                await LoadDividends();
                await LoadTotalDividends();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], "Dividend marked as paid");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error paying dividend: {ex.Message}");
            }
        }
    }

    // TODO: Implement dividend edit functionality
    // private void EditDividend(int dividendId)
    // {
    //     Navigation.NavigateTo($"/dividends/{dividendId}/edit");
    // }

    private async Task DeleteDividend(int dividendId)
    {
        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Warning"], "Delete this dividend?");
        if (confirmed)
        {
            try
            {
                await DividendService.DeleteDividendAsync(dividendId);
                await LoadDividends();
                await LoadTotalDividends();
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], "Dividend deleted successfully");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], $"Error deleting dividend: {ex.Message}");
            }
        }
    }

    private static string GetStatusColor(DividendStatus status)
    {
        return status switch
        {
            DividendStatus.Declared => "warning",
            DividendStatus.Approved => "info",
            DividendStatus.Paid => "success",
            DividendStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}