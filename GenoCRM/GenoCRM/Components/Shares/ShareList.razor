@page "/shares"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "ViewShares")]
@inject IShareService ShareService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Cooperative Shares</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Cooperative Shares</h1>
    <button class="btn btn-primary" @onclick="CreateShare">
        <i class="fas fa-plus"></i> New Share
    </button>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Total Share Capital</h5>
                <h3 class="text-success">@_totalShareCapital.ToString("C")</h3>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <select class="form-select" @bind="_selectedStatus" @bind:after="FilterByStatus">
            <option value="">All Status</option>
            <option value="Active">Active</option>
            <option value="Cancelled">Cancelled</option>
            <option value="Transferred">Transferred</option>
            <option value="Suspended">Suspended</option>
        </select>
    </div>
</div>

@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (_shares?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Certificate #</th>
                    <th>Member</th>
                    <th>Quantity</th>
                    <th>Nominal Value</th>
                    <th>Current Value</th>
                    <th>Total Value</th>
                    <th>Issue Date</th>
                    <th>Status</th>
                    <th>Paid</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var share in _shares)
                {
                    <tr>
                        <td>@share.CertificateNumber</td>
                        <td>@share.Member?.FullName</td>
                        <td>@share.Quantity</td>
                        <td>@share.NominalValue.ToString("C")</td>
                        <td>@share.Value.ToString("C")</td>
                        <td>@share.TotalValue.ToString("C")</td>
                        <td>@share.IssueDate.ToShortDateString()</td>
                        <td>
                            <span class="badge bg-@GetStatusColor(share.Status)">
                                @share.Status
                            </span>
                        </td>
                        <td>
                            @if (share.IsFullyPaid)
                            {
                                <span class="badge bg-success">Paid</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">@share.OutstandingAmount.ToString("C") due</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewShare(share.Id)">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditShare(share.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => CancelShare(share.Id)">
                                    <i class="fas fa-ban"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No shares found.
    </div>
}

@code {
    private IEnumerable<CooperativeShare>? _shares;
    private string _selectedStatus = string.Empty;
    private bool _isLoading = true;
    private decimal _totalShareCapital;

    protected override async Task OnInitializedAsync()
    {
        await LoadShares();
        await LoadTotalCapital();
    }

    private async Task LoadShares()
    {
        try
        {
            _isLoading = true;
            _shares = await ShareService.GetAllSharesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading shares: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTotalCapital()
    {
        try
        {
            _totalShareCapital = await ShareService.GetTotalShareCapitalAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading total capital: {ex.Message}");
        }
    }

    private async Task FilterByStatus()
    {
        if (string.IsNullOrWhiteSpace(_selectedStatus))
        {
            await LoadShares();
            return;
        }

        try
        {
            _isLoading = true;
            if (Enum.TryParse<ShareStatus>(_selectedStatus, out var status))
            {
                _shares = await ShareService.GetSharesByStatusAsync(status);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error filtering shares: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CreateShare()
    {
        Navigation.NavigateTo("/shares/create");
    }

    private void ViewShare(int shareId)
    {
        Navigation.NavigateTo($"/shares/{shareId}");
    }

    private void EditShare(int shareId)
    {
        Navigation.NavigateTo($"/shares/{shareId}/edit");
    }

    private async Task CancelShare(int shareId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this share?");
        if (confirmed)
        {
            try
            {
                await ShareService.DeleteShareAsync(shareId);
                await LoadShares();
                await LoadTotalCapital();
                await JSRuntime.InvokeVoidAsync("alert", "Share cancelled successfully");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error cancelling share: {ex.Message}");
            }
        }
    }

    private static string GetStatusColor(ShareStatus status)
    {
        return status switch
        {
            ShareStatus.Active => "success",
            ShareStatus.Cancelled => "danger",
            ShareStatus.Transferred => "info",
            ShareStatus.Suspended => "warning",
            _ => "secondary"
        };
    }
}