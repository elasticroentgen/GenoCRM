@page "/members/{MemberId:int}"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Policy = "ViewMembers")]
@inject IMemberService MemberService
@inject IShareService ShareService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Member Details</PageTitle>

@if (_member == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Member Details</h1>
        <div>
            <button class="btn btn-outline-secondary me-2" @onclick="GoBack">
                <i class="fas fa-arrow-left"></i> Back to List
            </button>
            <CascadingAuthenticationState>
            <AuthorizeView Policy="EditMembers">
                <Authorized>
                    <button class="btn btn-primary me-2" @onclick="EditMember">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Policy="DeleteMembers">
                <Authorized>
                    <button class="btn btn-danger" @onclick="DeleteMember">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </Authorized>
            </AuthorizeView>
            </CascadingAuthenticationState>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Personal Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-user"></i> Personal Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Member Number:</strong>
                            <p>@_member.MemberNumber</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Status:</strong>
                            <p>
                                <span class="badge bg-@GetStatusColor(_member.Status)">
                                    @_member.Status
                                </span>
                            </p>
                        </div>
                        <div class="col-md-6">
                            <strong>Full Name:</strong>
                            <p>@_member.FullName</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Email:</strong>
                            <p>@_member.Email</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Phone:</strong>
                            <p>@_member.Phone</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Birth Date:</strong>
                            <p>@_member.BirthDate?.ToString("dd.MM.yyyy")</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Address Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-map-marker-alt"></i> Address Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <strong>Address:</strong>
                            <p>
                                @_member.Street<br/>
                                @_member.PostalCode @_member.City<br/>
                                @_member.Country
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Membership Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-calendar"></i> Membership Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Join Date:</strong>
                            <p>@_member.JoinDate.ToString("dd.MM.yyyy")</p>
                        </div>
                        @if (_member.LeaveDate.HasValue)
                        {
                            <div class="col-md-6">
                                <strong>Leave Date:</strong>
                                <p>@_member.LeaveDate.Value.ToString("dd.MM.yyyy")</p>
                            </div>
                        }
                        <div class="col-md-12">
                            <strong>Member Since:</strong>
                            <p>@GetMembershipDuration() days</p>
                        </div>
                        @if (!string.IsNullOrEmpty(_member.Notes))
                        {
                            <div class="col-md-12">
                                <strong>Notes:</strong>
                                <p>@_member.Notes</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Summary Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Summary</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <strong>Total Shares:</strong>
                        <p class="h4 text-primary">@_totalShares</p>
                    </div>
                    <div class="mb-3">
                        <strong>Total Share Value:</strong>
                        <p class="h4 text-success">@_totalShareValue.ToString("C")</p>
                    </div>
                    <div class="mb-3">
                        <strong>Active Shares:</strong>
                        <p>@_activeShares</p>
                    </div>
                </div>
            </div>

            <!-- Quick Actions Card -->
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-bolt"></i> Quick Actions</h5>
                </div>
                <div class="card-body">
                    <CascadingAuthenticationState>
                    <AuthorizeView Policy="CreateShares">
                        <Authorized>
                            <button class="btn btn-outline-primary btn-sm w-100 mb-2" @onclick="CreateShare">
                                <i class="fas fa-certificate"></i> Add Share
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="ViewShares">
                        <Authorized>
                            <button class="btn btn-outline-info btn-sm w-100 mb-2" @onclick="ViewShares">
                                <i class="fas fa-eye"></i> View Shares
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="ViewDividends">
                        <Authorized>
                            <button class="btn btn-outline-success btn-sm w-100 mb-2" @onclick="ViewDividends">
                                <i class="fas fa-money-bill-wave"></i> View Dividends
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    </CascadingAuthenticationState>
                </div>
            </div>
        </div>
    </div>

    <!-- Shares Table -->
    @if (_shares?.Any() == true)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5><i class="fas fa-certificate"></i> Member Shares</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Certificate #</th>
                                <th>Quantity</th>
                                <th>Nominal Value</th>
                                <th>Total Value</th>
                                <th>Issue Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var share in _shares)
                            {
                                <tr>
                                    <td>@share.CertificateNumber</td>
                                    <td>@share.Quantity</td>
                                    <td>@share.NominalValue.ToString("C")</td>
                                    <td>@share.TotalValue.ToString("C")</td>
                                    <td>@share.IssueDate.ToString("dd.MM.yyyy")</td>
                                    <td>
                                        <span class="badge bg-@GetShareStatusColor(share.Status)">
                                            @share.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public int MemberId { get; set; }
    
    private Member? _member;
    private IEnumerable<CooperativeShare>? _shares;
    private int _totalShares;
    private int _activeShares;
    private decimal _totalShareValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadMemberDetails();
        await LoadMemberShares();
    }

    private async Task LoadMemberDetails()
    {
        try
        {
            _member = await MemberService.GetMemberByIdAsync(MemberId);
            if (_member == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Member not found");
                Navigation.NavigateTo("/members");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading member: {ex.Message}");
            Navigation.NavigateTo("/members");
        }
    }

    private async Task LoadMemberShares()
    {
        try
        {
            _shares = await ShareService.GetSharesByMemberIdAsync(MemberId);
            _totalShares = _shares?.Sum(s => s.Quantity) ?? 0;
            _activeShares = _shares?.Where(s => s.Status == ShareStatus.Active).Sum(s => s.Quantity) ?? 0;
            _totalShareValue = _shares?.Where(s => s.Status == ShareStatus.Active).Sum(s => s.TotalValue) ?? 0;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading shares: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/members");
    }

    private void EditMember()
    {
        Navigation.NavigateTo($"/members/{MemberId}/edit");
    }

    private async Task DeleteMember()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this member? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await MemberService.DeleteMemberAsync(MemberId);
                await JSRuntime.InvokeVoidAsync("alert", "Member deleted successfully");
                Navigation.NavigateTo("/members");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting member: {ex.Message}");
            }
        }
    }

    private void CreateShare()
    {
        Navigation.NavigateTo($"/shares/create?memberId={MemberId}");
    }

    private void ViewShares()
    {
        Navigation.NavigateTo($"/shares?memberId={MemberId}");
    }

    private void ViewDividends()
    {
        Navigation.NavigateTo($"/dividends?memberId={MemberId}");
    }

    private int GetMembershipDuration()
    {
        var endDate = _member?.LeaveDate ?? DateTime.Today;
        return (endDate - _member?.JoinDate)?.Days ?? 0;
    }

    private static string GetStatusColor(MemberStatus status)
    {
        return status switch
        {
            MemberStatus.Active => "success",
            MemberStatus.Inactive => "warning",
            MemberStatus.Suspended => "danger",
            MemberStatus.Terminated => "secondary",
            _ => "secondary"
        };
    }

    private static string GetShareStatusColor(ShareStatus status)
    {
        return status switch
        {
            ShareStatus.Active => "success",
            ShareStatus.Cancelled => "danger",
            ShareStatus.Transferred => "info",
            ShareStatus.Suspended => "warning",
            _ => "secondary"
        };
    }
}