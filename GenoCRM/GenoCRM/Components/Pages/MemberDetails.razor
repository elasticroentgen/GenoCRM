@page "/members/{MemberId:int}"
@using GenoCRM.Models.Domain
@using GenoCRM.Services.Business
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GenoCRM.Services.Localization
@using GenoCRM.Services.UI
@using GenoCRM.Resources.Pages
@attribute [Authorize(Policy = "ViewMembers")]
@inject IMemberService MemberService
@inject IShareService ShareService
@inject NavigationManager Navigation
@inject IStringLocalizer<GenoCRM.SharedResource> SharedLocalizer
@inject IStringLocalizer<Members> MembersLocalizer
@inject IFormattingService FormattingService
@inject IModalService ModalService
@inject IShareConsolidationService ConsolidationService
@rendermode InteractiveServer

<PageTitle>@MembersLocalizer["MemberDetails"]</PageTitle>

@if (_member == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">@MembersLocalizer["Loading"]</span>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@MembersLocalizer["MemberDetails"]</h1>
        <div>
            <button class="btn btn-outline-secondary me-2" @onclick="GoBack">
                <i class="fas fa-arrow-left"></i> @MembersLocalizer["BackToList"]
            </button>
            <CascadingAuthenticationState>
            <AuthorizeView Policy="EditMembers">
                <Authorized>
                    <button class="btn btn-primary me-2" @onclick="EditMember">
                        <i class="fas fa-edit"></i> @SharedLocalizer["Edit"]
                    </button>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Policy="DeleteMembers">
                <Authorized>
                    <button class="btn btn-danger" @onclick="DeleteMember">
                        <i class="fas fa-trash"></i> @SharedLocalizer["Delete"]
                    </button>
                </Authorized>
            </AuthorizeView>
            </CascadingAuthenticationState>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <!-- Personal Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-user"></i> @MembersLocalizer["PersonalInformation"]</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["MemberNumber"]:</strong>
                            <p>@_member.MemberNumber</p>
                        </div>
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["Status"]:</strong>
                            <p>
                                <span class="badge bg-@GetStatusColor(_member.Status)">
                                    @GetLocalizedStatus(_member.Status)
                                </span>
                            </p>
                        </div>
                        <div class="col-md-6">
                            <strong>@MembersLocalizer["FullName"]:</strong>
                            <p>@_member.FullName</p>
                        </div>
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["Email"]:</strong>
                            <p>@_member.Email</p>
                        </div>
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["Phone"]:</strong>
                            <p>@_member.Phone</p>
                        </div>
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["BirthDate"]:</strong>
                            <p>@FormattingService.FormatDate(_member.BirthDate)</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Address Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-map-marker-alt"></i> @MembersLocalizer["AddressInformation"]</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <strong>@SharedLocalizer["Address"]:</strong>
                            <p>
                                @_member.Street<br/>
                                @_member.PostalCode @_member.City<br/>
                                @_member.Country
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Membership Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-calendar"></i> @MembersLocalizer["MembershipInformation"]</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>@SharedLocalizer["JoinDate"]:</strong>
                            <p>@FormattingService.FormatDate(_member.JoinDate)</p>
                        </div>
                        @if (_member.LeaveDate.HasValue)
                        {
                            <div class="col-md-6">
                                <strong>@MembersLocalizer["LeaveDate"]:</strong>
                                <p>@FormattingService.FormatDate(_member.LeaveDate)</p>
                            </div>
                        }
                        <div class="col-md-12">
                            <strong>@MembersLocalizer["MemberSince"]:</strong>
                            <p>@GetMembershipDuration() @MembersLocalizer["Days"]</p>
                        </div>
                        @if (!string.IsNullOrEmpty(_member.Notes))
                        {
                            <div class="col-md-12">
                                <strong>@MembersLocalizer["Notes"]:</strong>
                                <p>@_member.Notes</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Summary Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> @MembersLocalizer["Summary"]</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <strong>@MembersLocalizer["TotalShares"]:</strong>
                        <p class="h4 text-primary">@_totalShares</p>
                    </div>
                    <div class="mb-3">
                        <strong>@MembersLocalizer["TotalShareValue"]:</strong>
                        <p class="h4 text-success">@FormattingService.FormatCurrency(_totalShareValue)</p>
                    </div>
                    <div class="mb-3">
                        <strong>@MembersLocalizer["ActiveShares"]:</strong>
                        <p>@_activeShares</p>
                    </div>
                </div>
            </div>

            <!-- Quick Actions Card -->
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-bolt"></i> @MembersLocalizer["QuickActions"]</h5>
                </div>
                <div class="card-body">
                    <CascadingAuthenticationState>
                    <AuthorizeView Policy="CreateShares">
                        <Authorized>
                            <button class="btn btn-outline-primary btn-sm w-100 mb-2" @onclick="CreateShare">
                                <i class="fas fa-certificate"></i> @MembersLocalizer["AddShare"]
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="ViewShares">
                        <Authorized>
                            <button class="btn btn-outline-info btn-sm w-100 mb-2" @onclick="ViewShares">
                                <i class="fas fa-eye"></i> @MembersLocalizer["ViewShares"]
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="ViewDividends">
                        <Authorized>
                            <button class="btn btn-outline-success btn-sm w-100 mb-2" @onclick="ViewDividends">
                                <i class="fas fa-money-bill-wave"></i> @MembersLocalizer["ViewDividends"]
                            </button>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Policy="ConsolidateShares">
                        <Authorized>
                            @if (_canConsolidate)
                            {
                                <button class="btn btn-outline-warning btn-sm w-100 mb-2" @onclick="ConsolidateShares">
                                    <i class="fas fa-compress-alt"></i> @SharedLocalizer["ConsolidateShares"]
                                </button>
                            }
                        </Authorized>
                    </AuthorizeView>
                    </CascadingAuthenticationState>
                </div>
            </div>
        </div>
    </div>

    <!-- Shares Table -->
    @if (_shares?.Any() == true)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5><i class="fas fa-certificate"></i> @MembersLocalizer["MemberShares"]</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>@MembersLocalizer["CertificateNumber"]</th>
                                <th>@MembersLocalizer["Quantity"]</th>
                                <th>@MembersLocalizer["NominalValue"]</th>
                                <th>@MembersLocalizer["TotalValue"]</th>
                                <th>@MembersLocalizer["IssueDate"]</th>
                                <th>@SharedLocalizer["Status"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var share in _shares)
                            {
                                <tr>
                                    <td>@share.CertificateNumber</td>
                                    <td>@share.Quantity</td>
                                    <td>@FormattingService.FormatCurrency(share.NominalValue)</td>
                                    <td>@FormattingService.FormatCurrency(share.TotalValue)</td>
                                    <td>@FormattingService.FormatDate(share.IssueDate)</td>
                                    <td>
                                        <span class="badge bg-@GetShareStatusColor(share.Status)">
                                            @share.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public int MemberId { get; set; }
    
    private Member? _member;
    private IEnumerable<CooperativeShare>? _shares;
    private int _totalShares;
    private int _activeShares;
    private decimal _totalShareValue;
    private bool _canConsolidate;
    private ShareConsolidationModal _consolidationModal = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadMemberDetails();
        await LoadMemberShares();
        await CheckConsolidationAvailability();
    }

    private async Task LoadMemberDetails()
    {
        try
        {
            _member = await MemberService.GetMemberByIdAsync(MemberId);
            if (_member == null)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], MembersLocalizer["MemberNotFound"]);
                Navigation.NavigateTo("/members");
            }
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], string.Format(MembersLocalizer["ErrorLoadingMember"], ex.Message));
            Navigation.NavigateTo("/members");
        }
    }

    private async Task LoadMemberShares()
    {
        try
        {
            _shares = await ShareService.GetSharesByMemberIdAsync(MemberId);
            _totalShares = _shares?.Sum(s => s.Quantity) ?? 0;
            _activeShares = _shares?.Where(s => s.Status == ShareStatus.Active).Sum(s => s.Quantity) ?? 0;
            _totalShareValue = _shares?.Where(s => s.Status == ShareStatus.Active).Sum(s => s.TotalValue) ?? 0;
        }
        catch (Exception ex)
        {
            await ModalService.ShowErrorAsync(SharedLocalizer["Error"], string.Format(MembersLocalizer["ErrorLoadingShares"], ex.Message));
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/members");
    }

    private void EditMember()
    {
        Navigation.NavigateTo($"/members/{MemberId}/edit");
    }

    private async Task DeleteMember()
    {
        var confirmed = await ModalService.ShowConfirmationAsync(SharedLocalizer["Warning"], MembersLocalizer["DeleteConfirmation"]);
        if (confirmed)
        {
            try
            {
                await MemberService.DeleteMemberAsync(MemberId);
                await ModalService.ShowSuccessAsync(SharedLocalizer["Success"], MembersLocalizer["MemberDeletedSuccessfully"]);
                Navigation.NavigateTo("/members");
            }
            catch (Exception ex)
            {
                await ModalService.ShowErrorAsync(SharedLocalizer["Error"], string.Format(MembersLocalizer["ErrorDeletingMember"], ex.Message));
            }
        }
    }

    private void CreateShare()
    {
        Navigation.NavigateTo($"/shares/create?memberId={MemberId}");
    }

    private void ViewShares()
    {
        Navigation.NavigateTo($"/shares?memberId={MemberId}");
    }

    private void ViewDividends()
    {
        Navigation.NavigateTo($"/dividends?memberId={MemberId}");
    }

    private async Task CheckConsolidationAvailability()
    {
        try
        {
            _canConsolidate = await ConsolidationService.CanMemberConsolidateSharesAsync(MemberId);
        }
        catch (Exception ex)
        {
            // Log error silently
            _canConsolidate = false;
        }
    }

    private async Task ConsolidateShares()
    {
        await _consolidationModal.ShowAsync();
    }

    private async Task OnConsolidationCompleted()
    {
        await LoadMemberShares();
        await CheckConsolidationAvailability();
        StateHasChanged();
    }

    private int GetMembershipDuration()
    {
        var endDate = _member?.LeaveDate ?? DateTime.Today;
        return (endDate - _member?.JoinDate)?.Days ?? 0;
    }

    private static string GetStatusColor(MemberStatus status)
    {
        return status switch
        {
            MemberStatus.Active => "success",
            MemberStatus.Inactive => "warning",
            MemberStatus.Suspended => "danger",
            MemberStatus.Terminated => "secondary",
            _ => "secondary"
        };
    }

    private static string GetShareStatusColor(ShareStatus status)
    {
        return status switch
        {
            ShareStatus.Active => "success",
            ShareStatus.Cancelled => "danger",
            ShareStatus.Transferred => "info",
            ShareStatus.Suspended => "warning",
            _ => "secondary"
        };
    }

    private string GetLocalizedStatus(MemberStatus status)
    {
        return status switch
        {
            MemberStatus.Active => SharedLocalizer["Active"],
            MemberStatus.Inactive => SharedLocalizer["Inactive"],
            MemberStatus.Suspended => MembersLocalizer["Suspended"],
            MemberStatus.Terminated => SharedLocalizer["Terminated"],
            _ => status.ToString()
        };
    }
}

<ShareConsolidationModal @ref="_consolidationModal" 
                        MemberId="@MemberId" 
                        OnConsolidationCompleted="OnConsolidationCompleted" />